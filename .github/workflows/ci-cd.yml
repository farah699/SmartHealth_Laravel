name: SmartHealth CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: smarthealth

jobs:
  # Job 1: Tests Laravel
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: SmartHealth_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo_mysql, mbstring, exif, pcntl, bcmath, gd, zip

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: 📦 Install NPM dependencies
      run: npm ci

    - name: 📄 Setup Laravel environment
      run: |
        cp .env.example .env
        php artisan key:generate
        mkdir -p storage/framework/{cache/data,sessions,views}
        mkdir -p storage/logs
        mkdir -p bootstrap/cache
        chmod -R 777 storage bootstrap/cache

    - name: 🎨 Build frontend assets
      run: npm run production

    - name: 🗄️ Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: SmartHealth_test
        DB_USERNAME: root
        DB_PASSWORD: root_password

    - name: 🧪 Run PHPUnit tests
      run: php artisan test
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: SmartHealth_test
        DB_USERNAME: root
        DB_PASSWORD: root_password

    - name: 📊 Generate test coverage (optional)
      run: php artisan test --coverage-clover=coverage.xml || echo "Coverage generation failed, continuing..."
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: SmartHealth_test
        DB_USERNAME: root
        DB_PASSWORD: root_password

    - name: 📈 Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          storage/logs/
        retention-days: 7

  # Job 2: Build Docker App principale
  build-app:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🚀 Build and push Laravel app
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/smarthealth-app:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/smarthealth-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Build AI Services
  build-ai-services:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - service: yoga-ai
            context: AI
          - service: exercise-ai
            context: AI_farah
          - service: food-ai
            context: AIsalma
          - service: blog-ai
            context: IABaha

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🚀 Build and push ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.context }}/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/smarthealth-${{ matrix.service }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/smarthealth-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: SonarQube Analysis (optionnel)
  sonarqube:
    needs: test
    runs-on: ubuntu-latest
    if: env.SONAR_TOKEN != ''
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📊 Run SonarQube Analysis
      run: |
        # Installation de SonarQube Scanner
        wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
        export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
        
        # Analyse SonarQube
        sonar-scanner \
          -Dsonar.projectKey=farah699_SmartHealth_Laravel \
          -Dsonar.organization=farah699 \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.sources=app,config,database,resources,routes \
          -Dsonar.tests=tests \
          -Dsonar.exclusions=vendor/**,node_modules/**,public/**,storage/**,bootstrap/cache/**,AI/**,AI_farah/**,AIsalma/**,IABaha/**
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Deployment notification
  deploy:
    needs: [test, build-app, build-ai-services]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🎯 Pipeline Summary
      run: |
        echo "🚀 SmartHealth CI/CD Pipeline Results"
        echo "====================================="
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "🐳 App Build: ${{ needs.build-app.result }}"
        echo "🤖 AI Services: ${{ needs.build-ai-services.result }}"
        echo ""
        
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build-app.result }}" == "success" ]; then
          echo "🎉 Pipeline completed successfully!"
          echo "📦 Images available on Docker Hub:"
          echo "   - farahhmida/smarthealth-app:latest"
          echo "   - farahhmida/smarthealth-yoga-ai:latest"
          echo "   - farahhmida/smarthealth-exercise-ai:latest"
          echo "   - farahhmida/smarthealth-food-ai:latest"
          echo "   - farahhmida/smarthealth-blog-ai:latest"
        else
          echo "❌ Pipeline had some failures. Check the logs above."
        fi